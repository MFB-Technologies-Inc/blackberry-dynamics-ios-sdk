/*
 * Copyright 2023 BlackBerry Limited. All rights reserved.
 * 
 * The documentation in this file is also used elsewhere.
 */

#ifndef __GD_SERVICES_H__
#define __GD_SERVICES_H__

#import <Foundation/Foundation.h>

/* \cond DOXYGEN_IGNORE */
#if __has_extension(attribute_deprecated_with_message)
#   define DEPRECATE_BRINGTOFRONTWITHOUTCOMPLETION __attribute((deprecated("Use bringToFront:completion:error:")))
#else
#   define DEPRECATE_BRINGTOFRONTWITHOUTCOMPLETION __attribute((deprecated))
#endif
/* \endcond */

NS_ASSUME_NONNULL_BEGIN

/** \defgroup iccerrors AppKinetics Errors
 * These constants can be used for handling or generating errors when
 * using AppKinetics.
 *
 * Errors can be generated by the AppKinetics system itself, or by service
 * provider applications working within the system. See the individual error
 * codes' documentation for a description of when each code is to be used, and
 * note the following.
 *
 * The <em>NotFound</em> codes are for use when the service, service version, or
 * method in a request is not offered by the provider application to which the
 * request was sent.
 * 
 * The <em>Disabled</em> codes are for use when the service, service version,
 * and method are generally offered by the provider application, but support is
 * currently disabled by a policy setting or other condition that is, in
 * principle, temporary.
 * \{
 */

/** Error domain for AppKinetics errors.
 * 
 * This domain is for generic AppKinetics service errors. Note that
 * this domain isn't used for errors that are specific to a service, nor for
 * errors that are specific to a service provider application.
 * 
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 *
 * An <tt>NSError</tt> with this value as its domain could be encountered:
 * - In the <tt>error</tt> parameter following a call to
 *   \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink where the request was not accepted by the
 *   AppKinetics system.
 * - In the <tt>error</tt> parameter following a call to
 *   \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink where the response was not accepted by the
 *   AppKinetics system.
 * - As the <tt>params</tt> object passed to an invocation of
 *   \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink where a request that had
 *   been accepted subsequently failed in the system.
 * .
 * Of the above, <tt>sendTo:</tt> and
 * <tt>GDServiceClientDidReceiveFrom:</tt> are part of the service consumer
 * side of the AppKinetics programming interface, and <tt>replyTo:</tt> is part
 * of the service provider side.
 */
extern NSString* const GDServicesErrorDomain;

/** A general AppKinetics error occurred.
 */
extern NSInteger const GDServicesErrorGeneral;

/** Application's process has been suspended by system.
 */
extern NSInteger const GDServicesErrorProcessSuspended;

/** The service consumer sent a request to an application that couldn't be found
 *  on the device or computer.
 */
extern NSInteger const GDServicesErrorApplicationNotFound; 

/** The service consumer sent a request that specified a service that isn't
 *  supported by the service provider.
 */
extern NSInteger const GDServicesErrorServiceNotFound;

/** The service consumer sent a request that specified a service version that
 *  isn't supported by the service provider.
 */
extern NSInteger const GDServicesErrorServiceVersionNotFound;

/** The service consumer sent a request that specified a method that isn't
 *  supported by the service provider.
 */
extern NSInteger const GDServicesErrorMethodNotFound;

/** The service consumer sent a request to an application that couldn't be
 *  unlocked.
 */
extern NSInteger const GDServicesErrorNotAllowed;

/** The application attempted to utilize an unsupported type as a service
 *  parameter, either in a service request or in a service response.
 */
extern NSInteger const GDServicesErrorInvalidParams;

/** The application attempted to establish a connection but couldn't find a
 *  valid X509 certificate.
 */
extern NSInteger const GDServicesErrorCertificateNotFound;

/** The service consumer sent a request that specified a method that has been
 *  disabled in the service provider.
 */
extern NSInteger const GDServicesMethodDisabled;

/** The service consumer sent a request that specified a service version that
 *  has been disabled in the service provider.
 */
extern NSInteger const GDServicesVersionDisabled;

/** The service consumer sent a request that specified a service that has been
 *  disabled in the service provider.
 */
extern NSInteger const GDServicesServiceDisabled;

/** The application attempted to establish a connection to the application that
 *  was activated for a different user.
 */
extern NSInteger const GDServicesErrorEnterpriseUserNotMatch;

/** \}
 */

/** \defgroup iccconstants AppKinetics Miscellaneous Constants
 * These miscellaneous constants are part of the AppKinetics programming
 * interface.
 *
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 * 
 * \{
 */

/** Constants for specifying foreground execution preference.
 * 
 * This enumeration represents a preference for which application is to execute
 * in foreground. The <tt>option</tt> parameter of the
 * \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink and \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink functions
 * always takes one of these values. See function references for details.
 */

typedef NS_ENUM(NSInteger, GDTForegroundOption)
{
    /** The current application is to be in the foreground. */
    GDEPreferMeInForeground,
    
    /** The other application is to be in the foreground. */
    GDEPreferPeerInForeground,
    
    /** There is no preference for which application is in foreground. */
    GDENoForegroundPreference
    
};

/** BlackBerry Dynamics service ID for Front Request.
 * 
 * Use this constant to send or identify a front request. See under Foreground
 * Execution and Front Request Programming Interface in the
 * \reflink GDService GDService class reference\endlink.
 */
extern NSString* const GDFrontRequestService;

/** Method name for the Front Request API.
 * 
 * Use this constant to identify the method in a front request. See under
 * Foreground Execution and Front Request Programming Interface in the
 * \reflink GDService GDService class reference\endlink.
 */
extern NSString* const GDFrontRequestMethod;

/** \}
 */

/*!
 * \protocol GDServiceClientDelegate GDServices.h <BlackBerryDynamics/GD/GDServices.h>
 * \brief Handler for AppKinetics consumer events.
 * 
 * \copydetails ssGDServicesClientListener
 */
@protocol GDServiceClientDelegate<NSObject>
@required
/** AppKinetics service response callback.
 * 
 * This callback is invoked when a response is received to an
 * AppKinetics service request. The parameters give the details of the service
 * response.
 * 
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 * 
 * See under Callback Invocation Sequence, above, for the position of this
 * callback in the order of service response callbacks.
 * 
 * A service response may be received in relation to a call to
 * \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink that was accepted by the AppKinetics system.
 *
 * The response can include file attachments and a results object from the
 * provider application. Check the type of the results object to determine
 * whether the service request succeeded.
 *
 * If the results object is of type
 * <tt>NSError</tt> then the service request
 * failed.
 * The error domain of the object will either be the
 * <tt>GDServicesErrorDomain</tt> value, in the case of a generic
 * AppKinetics failure, or a value that is specific to the service or to the
 * provider application. In any case, the <tt>NSError</tt> object should have a
 * suitable error code, a <tt>localizedDescription</tt>, and possibly additional
 * data in its <tt>userInfo</tt> dictionary. See also the <a
 *     href="https://developer.apple.com/reference/foundation/nserror"
 *     target="_blank"
 * >NSError class reference</a> on the apple.com developer website for the full
 * programming interface.
 * 
 * If the results object isn't of type
 * <tt>NSError</tt> then the service
 * request succeeded. In that case the results object will be of a valid service
 * parameter type, as defined under Service Parameters in the
 * \reflink GDService GDService class reference\endlink.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the provider application to which the original service
 *                    request was sent.
 *
 * @param params The results object, as returned by the provider application.
 * 
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of files that were attached
 *                    to the service response. See under File Attachments in the
 *                    \reflink GDService GDService class reference\endlink.
 * 
 * @param requestID <tt>NSString</tt> containing the ID assigned to the original
 *                  service request. An application that makes multiple
 *                  concurrent service requests can use this value to tie the
 *                  response back to the original request. The application must
 *                  have retained the ID from when \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink
 *                  was originally called.
 */
- (void) GDServiceClientDidReceiveFrom:(NSString*)application
                            withParams:(id)params
                       withAttachments:(NSArray<NSString *> *)attachments
              correspondingToRequestID:(NSString*)requestID;

@optional
/** Service request file attachment transmission start callback.
 * 
 * This callback is invoked when delivery of a service request file
 * attachment by the AppKinetics system starts. The path of the file is passed
 * as a parameter.
 *
 * Invocation of this callback notifies the application that the AppKinetics
 * system has started transferring the data in the file to the recipient of the
 * service request.
 *
 * The function that is invoked could display a sending status in its user
 * interface. The sending status could be cleared on receipt of the
 * <tt>GDServiceClientDidFinishSendingTo:</tt>
 * callback.
 *
 * @see \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink for details of sending service requests.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the recipient of the file.
 * 
 * @param filename <tt>NSString</tt> containing the path in the secure store of the
 *                 file that is now being sent.
 *
 * @param requestID <tt>NSString</tt> containing the unique identifier of the service
 *                  request to which the file is attached.
 */
- (void) GDServiceClientDidStartSendingTo:(NSString*)application withFilename:(NSString*)filename correspondingToRequestID:(NSString*)requestID;

@optional
/** Service request transmission complete callback.
 * 
 * This callback is invoked when the delivery of an AppKinetics service
 * request completes.
 *
 * Invocation of this callback notifies the application that:
 * - Any files that were attached to the service request have been copied to the
 *   secure store of the service provider.
 * - An independent copy of the parameters of the request, if any, has been made
 *   available to the service provider.
 * .
 * The function that is invoked can delete or modify any of the original
 * file attachments, and free any resources used to hold the request parameters.
 *
 * @see \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink for details of sending service requests.
 * 
 * @param requestID <tt>NSString</tt> containing the unique identifier of the service
 *                  request whose sending has completed.
 * 
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of any files that were
 *                    attached to the service request.
 *
 * @param params Reference to the parameters object of the service request.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to which the service request was sent.
 */
- (void) GDServiceClientDidFinishSendingTo:(NSString*)application withAttachments:(NSArray<NSString *> *)attachments withParams:(id)params correspondingToRequestID:(NSString*)requestID;

@optional
/** Service response file attachments transmission start callback.
 * 
 * This callback is invoked when file attachments are about to be
 * received through the AppKinetics system. The number of files that are about
 * to be received is passed as a parameter.
 *
 * This callback will be invoked once per service response that has attachments.
 * See under Callback Invocation Sequence, above, for its position in the order
 * of service response callbacks.
 * 
 * The function that is invoked could display a receiving status in its user
 * interface. The status could be cleared on receipt of the
 * \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink callback.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the provider application that sent the service response to
 *                    which the files are attached.
 *
 * @param attachments
 *         <tt>NSUInteger</tt> number of files that are
 *         about to be received, always one or more. This callback isn't invoked
 *         for service responses that have no attachments.
 *
 * @param requestID <tt>NSString</tt> containing the unique identifier of the original 
 *                  service request, the response to which the files are
 *                  attached.
 */
- (void) GDServiceClientWillStartReceivingFrom:(NSString*)application
                           numberOfAttachments:(NSUInteger)attachments
                                  forRequestID:(NSString*)requestID;

@optional
/** Service response individual file attachment transmission start callback.
 * 
 * This callback is invoked when an individual file attachment is about
 * to be received through the AppKinetics system. The path and size of the file
 * that is about to be received are passed as parameters.
 *
 * This callback will be invoked once per attachment. See under Callback
 * Invocation Sequence, above, for its position in the order of service response
 * callbacks.
 *
 * The function that is invoked could display or update a receiving status
 * in its user interface. The status could be cleared on receipt of the
 * \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink callback.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the provider application that sent the service response
 *                    to which the file is attached.
 *                    
 * @param path <tt>NSString</tt> containing the path of the attachment. The value will
 *             be the same as one of the elements in the <tt>attachments</tt>
 *             parameter passed to the subsequent
 *             \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink invocation.
 *
 * @param size <tt>NSNumber</tt> representing the size 
 *             of the file in bytes. The value will be an <tt>unsigned
 *             long long</tt>.
 *
 * @param requestID <tt>NSString</tt> containing the unique identifier of the original 
 *                  service request, the response to which the files are
 *                  attached.
 */
- (void) GDServiceClientWillStartReceivingFrom:(NSString*)application
                                attachmentPath:(NSString*)path
                                      fileSize:(NSNumber*)size
                                  forRequestID:(NSString*)requestID;

@end


/*!
 * \class GDServiceClient GDServices.h <BlackBerryDynamics/GD/GDServiceClient.h>
 * \brief AppKinetics service consumer.
 * 
 * \copydetails ssGDServicesServiceClient
 */
@interface GDServiceClient : NSObject

/** Send a service request.
 * 
 * Call this function to send an AppKinetics service request. The
 * request includes a method name, and can include service parameters and file
 * attachments to be conveyed to the provider application.
 *
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 * 
 * The AppKinetics system will assign a unique identifier to the service request
 * and make this available to the application. This value will also be returned
 * with any response to the request. An application that makes multiple
 * concurrent requests can use the request identifier to match responses with
 * requests.
 *
 * This method may perform storage or network I/O, and therefore <b>should not
 * be called on the UI thread</b>.
 *
 * @param application <tt>NSString</tt> containing the
 *                    native bundle identifier
 *                    of the service provider application.
 * A suitable value could be obtained from the address field of a
 * <tt>GDServiceProvider</tt> object returned by the \reflink GDiOS::getServiceProvidersFor:andVersion:andServiceType: getServiceProvidersFor: (GDiOS) \endlink
 * function.
 *
 * @param service <tt>NSString</tt> containing the identifier of the service to which
 *                the request is being sent. The value should correspond to a
 *                service that the service provider application offers.
 *
 * @param version <tt>NSString</tt> containing the version of the service being
 *                requested. The value should correspond to a version of service
 *                that the service provider application offers.
 *
 * @param method <tt>NSString</tt> containing the name of the method, within the
 *               service, that is being requested. The value should correspond
 *               to the name of a method that the service provider application
 *               offers.
 *
 * @param params The service parameters object for the request. See under
 *               Service Parameters in the \reflink GDService GDService class reference\endlink.
 *
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of files in the
 *                    BlackBerry Dynamics secure file system that are to
 *                    be attached to the request. See under File Attachments in
 *                    the \reflink GDService GDService class reference\endlink.
 *
 * @param option <tt>GDTForegroundOption</tt> specifying the foreground execution preference
 *               for processing of the request:\n
 *               <tt>GDEPreferPeerInForeground</tt> for the provider application being in the
 *               foreground.\n
 *               <tt>GDEPreferMeInForeground</tt> for this application being in the
 *               foreground.\n
 *               <tt>GDENoForegroundPreference</tt> to specify that there is no
 *               preference.\n
 *               See also the notes under Foreground Execution in the
 *               \reflink GDService GDService class reference\endlink.
 *
 * @param requestID Location of a an <tt>NSString</tt> pointer for returning the
 *                  unique identifier assigned to the request by the AppKinetics
 *                  system.
 *
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned.
 *
 * @return <tt>YES</tt> if the request was accepted by the AppKinetics system. The
 *         result of the service request could be notified to the application by
 *         invocation of its <tt>GDServiceClientDidReceiveFrom</tt> callback,
 *         depending on the service, and whether the request is able to be
 *         delivered. See \ref iccerrors.
 * @return <tt>NO</tt> Otherwise. The <tt>error</tt> location, if provided, will
 *         be set to point to an <tt>NSError</tt> object with details of the
 *         error condition.
 */
+ (BOOL) sendTo:(NSString*)application
    withService:(NSString*)service
    withVersion:(NSString*)version
     withMethod:(NSString*)method
     withParams:(nullable id)params
withAttachments:(nullable NSArray<NSString *> *)attachments
bringServiceToFront:(GDTForegroundOption)option
      requestID:(NSString * _Nullable * _Nullable)requestID
          error:(NSError**)error;

/** Cancel a service request.
 * 
 * Call this function to cancel AppKinetics service requests. The
 * application can only cancel requests that it sent, not requests sent by other
 * applications.
 *
 * This function can be used to cancel a single service request. Specify the
 * unique identifier of the request, which will have been generated when
 * \reflink GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient) \endlink was called.
 *
 * This function can also be used to cancel all service requests addressed
 * to a specific application.
 *
 * Cancellation of a request can succeed or fail. If cancellation succeeds:
 * - The
 *   <tt>GDServiceClientDidFinishSendingTo:</tt>
 *   callback in the sending application isn't subsequently invoked.
 * - The \reflink GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom \endlink callback in the
 *   receiving application won't be invoked.
 * .
 * Cancellation will fail if the service request has already been delivered, in
 * which case the above callback invocations would take place.
 *
 * @param requestID <tt>NSString</tt> containing the identifier of the request to be
 *                  cancelled, or <tt>nil</tt> to cancel all requests to the
 *                  specified recipient.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the recipient to which the request or requests were sent.
 *
 * @return <tt>YES</tt> if one or more requests were cancelled.
 * @return <tt>NO</tt> otherwise. This function returns <tt>NO</tt> if there is
 *                   no service request that matches the specified values, or if
 *                   none of the requests that match could be cancelled.
 */
+ (BOOL) cancelRequest:(nullable NSString*)requestID toApplication:(NSString*)application;

/** Bring another application to the foreground.
 *
 * Call this function to bring another application to the
 * foreground. This would typically be used when a service provider application
 * has requested foreground execution to process a request that has already been
 * sent. See under Foreground Execution in the \reflink GDService GDService class reference\endlink for
 * details.
 * 
This function is asynchronous. Success or failure is returned by
 * invocation of a code block specified in the <tt>completion</tt> parameter.
 * The block will receive one parameter of type <tt>BOOL</tt> and should have no
 * return value. It may or may not be executed on the main thread.
 *
 * Don't use this function outside the context of service request
 * processing.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to be brought to the foreground.
 *                    
 * @param completion Code block to execute when the operation completes or
 *                   fails. It receives one parameter:\n
 *                   <tt>YES</tt> if the other application was brought to the
 *                   foreground, based on the return code from the native
 *                   layer.\n
 *                   <tt>NO</tt> otherwise.
 *
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned.
 * @return <tt>YES</tt> if the <tt>completion</tt> code block will be invoked.
 * @return <tt>NO</tt> otherwise.
 */
+ (BOOL) bringToFront:(nonnull NSString*)application completion:( void(^)(BOOL) )completion error:(NSError**)error;

/** Bring another application to the foreground (deprecated).
 * 
 * \deprecated This function is deprecated and will be removed in a future
 * release. Use \reflink GDServiceClient::bringToFront:completion:error: bringToFront: \endlink with a completion block
 * instead.
 * 
 * Call this function to bring another application to the
 * foreground. This would typically be used when a service provider application
 * has requested foreground execution to process a request that has already been
 * sent. See under Foreground Execution in the \reflink GDService GDService class reference\endlink for
 * details.
 * 
Don't use this function outside the context of service request
 * processing.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to be brought to the foreground.
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned.
 * @return <tt>YES</tt> if the specified application was brought to the foreground,
 *         based on the return code from the native layer.
 * @return <tt>NO</tt> otherwise.
 */
+ (BOOL) bringToFront:(NSString*)application error:(NSError**)error DEPRECATE_BRINGTOFRONTWITHOUTCOMPLETION;

/** Handler for responses to service requests.
 * 
 * When a response to an AppKinetics service request is received, the
 * BlackBerry Dynamics runtime dispatches an event to a callback function
 * within the application.
 * 
 * Set this property to an instance of a class in the application that contains
 * the code for the required callback function
 * , i.e. a class that implements
 * the \reflink GDServiceClientDelegate GDServiceClientDelegate \endlink protocol.
 * The class should be coded to handle responses from service providers to which
 * the application sends service requests.
 * 
 * Note that there is only one delegate, that
 * handles all service responses received by the application.
 *
 */
@property (nullable, weak, getter = getDelegate, setter = setDelegate:) id<GDServiceClientDelegate> delegate;

@end

/*!
 * \protocol GDServiceDelegate GDServices.h <BlackBerryDynamics/GD/GDServices.h>
 * \brief AppKinetics service provider implementation.
 * 
 * \copydetails ssGDServicesServiceListener
 */
@protocol GDServiceDelegate<NSObject>

@required
/** Service request callback.
 * 
 * This callback is invoked when a service request is sent to the
 * application within the AppKinetics system. The parameters with which this
 * function is called give the details of the service request.
 *
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 *
 * See under Callback Invocation Sequence, above, for the position of this
 * callback in the order of service request callbacks.
 * 
 * When this callback is invoked, the application must:
 * -# Check that the service request is valid.
 * -# Process the request, if valid.
 * -# If required by the service definition or other published interface,
 *    respond to the request with a success or failure result by calling the
 *    \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink function.
 * .
 * If the application determines that a service request is invalid then the
 * application should return an error in the <tt>replyTo</tt> call. For some
 * check failures, the application must set a particular code in the returned
 * error. These are documented in the Parameters section, below.
 * @see \reflink iccerrors AppKinetics Errors \endlink.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the consumer application that sent the service request.
 *                    The application is not required to check the value, but
 *                    may do so. For example, the application could be coded
 *                    only to process service requests from a known set of
 *                    consumer applications, and to fail requests from unknown
 *                    applications.
 *
 * @param service <tt>NSString</tt> containing the identifier of the service being
 *                requested. The application must check the value. If the
 *                application does not offer the requested service then the
 *                <tt>GDServicesErrorServiceNotFound</tt> code must be set.
 *
 * @param version <tt>NSString</tt> containing the version identifier of the service
 *                being requested. The application must check the value. If the
 *                application does not offer the requested service version then
 *                the <tt>GDServicesErrorServiceVersionNotFound</tt> code
 *                must be set.
 *
 * @param method <tt>NSString</tt> containing the name of the method within the service
 *               request. The application must check the value. If the
 *               application does not offer the requested method then the
 *               <tt>GDServicesErrorMethodNotFound</tt> code must be set.
 *
 * @param params The service parameters in the request, sent by the consumer
 *               application. See under Service Parameters in the
 *               \reflink GDService GDService class reference\endlink. If the service parameters are in some
 *               way invalid then a service-specific error code could be set, or
 *               this could be handled in some other way according to the
 *               service definition.
 *
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of files that were attached
 *                    to the service request. See under File Attachments in the
 *                    \reflink GDService GDService class reference\endlink. If the file attachments are in
 *                    some way invalid then a service-specific error code could
 *                    be set in the results object, or this could be handled in
 *                    some other way according to the service definition.
 * 
 * @param requestID <tt>NSString</tt> containing the unique identifier assigned to this
 *                  service request by the AppKinetics system. The application
 *                  must pass this value as the <tt>requestID</tt> parameter in
 *                  the \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink call if it responds to the
 *                  request.
 */
- (void) GDServiceDidReceiveFrom:(NSString*)application
                      forService:(NSString*)service
                     withVersion:(NSString*)version
                       forMethod:(NSString*)method
                      withParams:(id)params
                 withAttachments:(NSArray<NSString *> *)attachments
                    forRequestID:(NSString*)requestID;

@optional

/** Service response file attachment transmission start callback.
 * 
 * This callback is invoked when delivery of a service response file
 * attachment by the AppKinetics system starts. The path of the file is passed
 * as a parameter.
 *
 * Invocation of this callback notifies the application that the AppKinetics
 * system has started transferring the data in the file to the recipient of the
 * service response.
 *
 * The function that is invoked could display a sending status in its user
 * interface. The sending status could be cleared on receipt of the
 * <tt>GDServiceDidFinishSendingTo:</tt>
 * callback.
 *
 * @see \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink for details of sending a service response.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the recipient of the file.
 *
 * @param filename <tt>NSString</tt> containing the path in the secure store of the
 *                 file that is now being sent.
 *
 * @param requestID <tt>NSString</tt> containing the unique ID of the original service
 *                  request, the response to which the file is attached.
 */
- (void) GDServiceDidStartSendingTo:(NSString*)application withFilename:(NSString*)filename correspondingToRequestID:(NSString*)requestID;

/** Service response transmission complete callback.
 * 
 * This callback is invoked when delivery of an AppKinetics service
 * response completes.
 *
 * Invocation of this callback notifies the application that:
 * - Any files that were attached to the service response have been copied to
 *   the secure store of the service consumer.
 * - An independent copy of the parameters of the response, if any, has been
 *   made available to the service consumer.
 * .
 * The function that is invoked can delete or modify any of the original
 * file attachments, and free any resources used to hold the response
 * parameters.
 *
 * @see \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink for details of sending service responses.
 * 
 * @param requestID <tt>NSString</tt> containing the unique identifier of the service
 *                  request to which the sending of the response has completed.
 * 
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of any files that were
 *                    attached to the service response.
 *
 * @param params Reference to the parameters object of the service response.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to which the service response was sent.
 */
- (void) GDServiceDidFinishSendingTo:(NSString*)application withAttachments:(NSArray<NSString *> *)attachments withParams:(id)params correspondingToRequestID:(NSString*)requestID;

@optional
/** Service request file attachments transmission start callback.
 * 
 * This callback is invoked when file attachments are about to be
 * received through the AppKinetics system. The number of files that are about
 * to be received is passed as a parameter.
 *
 * This callback will be invoked once per service request that has attachments.
 * See under Callback Invocation Sequence, above, for its position in the order
 * of service request callbacks.
 * 
 * The function that is invoked could display a receiving status in its user
 * interface. The status could be cleared on receipt of the
 * \reflink GDServiceDelegate::GDServiceDidReceiveFrom:forService:withVersion:forMethod:withParams:withAttachments:forRequestID: GDServiceDidReceiveFrom \endlink callback.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the consumer application that sent the service request to
 *                    which the files are attached.
 *
 * @param attachments
 *         <tt>NSUInteger</tt> number of files that are
 *         about to be received, always one or more. This callback isn't invoked
 *         for service requests that have no attachments.
 *
 * @param requestID <tt>NSString</tt> containing the unique identifier of the service
 *                  request to which the files are attached.
 */
- (void) GDServiceWillStartReceivingFrom:(NSString*)application
                     numberOfAttachments:(NSUInteger)attachments
                            forRequestID:(NSString*)requestID;

@optional
/** Service request individual file attachment transmission start callback.
 * 
 * This callback is invoked when an individual file attachment is about
 * to be received through the AppKinetics system. The path and size of the file
 * that is about to be received are passed as parameters.
 *
 * This callback will be invoked once per attachment. See under Callback
 * Invocation Sequence, above, for its position in the order of service request
 * callbacks.
 *
 * The function that is invoked could display a receiving status in its user
 * interface. The status could be cleared on receipt of the
 * \reflink GDServiceDelegate::GDServiceDidReceiveFrom:forService:withVersion:forMethod:withParams:withAttachments:forRequestID: GDServiceDidReceiveFrom \endlink callback.
 * 
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the consumer application that sent the service request to
 *                    which the file is attached.
 *                    
 * @param path <tt>NSString</tt> containing the path of the attachment. The value will
 *             be the same as one of the elements in the <tt>attachments</tt>
 *             parameter passed to the subsequent
 *             \reflink GDServiceDelegate::GDServiceDidReceiveFrom:forService:withVersion:forMethod:withParams:withAttachments:forRequestID: GDServiceDidReceiveFrom \endlink invocation.
 *
 * @param size <tt>NSNumber</tt> representing the size 
 *             of the file in bytes. The value will be an <tt>unsigned
 *             long long</tt>.
 *
 * @param requestID <tt>NSString</tt> containing the unique identifier of the service
 *                  request to which the file is attached.
 */
- (void) GDServiceWillStartReceivingFrom:(NSString*)application
                          attachmentPath:(NSString*)path
                                fileSize:(NSNumber*)size
                            forRequestID:(NSString*)requestID;

@end

/*!
 * \class GDService GDServices.h <BlackBerryDynamics/GD/GDServices.h>
 * \brief AppKinetics service provider.
 * 
 * \copydetails ssGDServicesService
 * 
 * <h3>AppKinetics</h3>
 * \copydetails ssGDServices
 */
@interface GDService : NSObject

/** Send a response or error message.
 * 
 * Call this function to respond to a consumer application from
 * which an AppKinetics service request has been received. The response can
 * include a results object and file attachments to be conveyed to the consumer
 * application. The results object will notify the consumer of the success or
 * failure of the request.
 * 
 * For an overall description of AppKinetics see the \reflink GDService GDService class reference\endlink.
 *
 * If the request failed for any reason, pass an <tt>NSError</tt> as the
 * results object. Populate the <tt>NSError</tt> with a suitable error code and
 * a <tt>localizedDescription</tt>. Add any additional data to the
 * <tt>userInfo</tt> dictionary. The error domain will be set by the BlackBerry
 * Dynamics runtime to be the same as the service identifier. See also the <a
 *     href="https://developer.apple.com/reference/foundation/nserror"
 *     target="_blank"
 * >NSError class reference</a> on the apple.com developer website.
 * 
 * If the request succeeded then pass a results object of a valid service
 * parameter type, as defined under Service Parameters in the
 * \reflink GDService GDService class reference\endlink.
 * 
 * @param application <tt>NSString</tt> containing the native application idenitifer of
 *                    the consumer, as supplied in the original service request.
 *
 * @param params <tt>NSObject</tt> for the results
 *               object.
 *
 * @param option <tt>GDTForegroundOption</tt> specifying the foreground execution preference
 *               after delivery of the response:\n
 *               <tt>GDEPreferPeerInForeground</tt> for the consumer application being in the
 *               foreground.\n
 *               <tt>GDEPreferMeInForeground</tt> for this application being in the
 *               foreground.\n
 *               <tt>GDENoForegroundPreference</tt> to specify that there is no
 *               preference.\n
 *               See also the notes under Foreground Execution in the
 *               \reflink GDService GDService class reference\endlink.
 *
 * @param attachments <tt>NSArray</tt> of <tt>NSString</tt>
 *                    objects containing the paths of files in the BlackBerry
 *                    Dynamics secure file system that are to be attached to the
 *                    response. See under File Attachments in the
 *                    \reflink GDService GDService class reference\endlink.
 *
 * @param requestID <tt>NSString</tt> containing the identifier of the service request
 *                  to which this is a response. The identifier will have been
 *                  passed as a parameter to the delegated handler that
 *                  implements the service.
 *
 *
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned. Note that this means errors that occur when attempting to deliver the response, and is <em>not </em> a reference to the results object.
 * @return <tt>YES</tt> if the response was accepted by the AppKinetics system.
 * @return <tt>NO</tt> otherwise. The <tt>error</tt> location, if provided, will
 *         be set to point to an <tt>NSError</tt> object with details of the
 *         error condition.
 */
+ (BOOL) replyTo:(nullable NSString*)application
      withParams:(nullable id)params
bringClientToFront:(GDTForegroundOption)option
 withAttachments:(nullable NSArray<NSString *> *)attachments
       requestID:(NSString*)requestID
           error:(NSError**)error;

/** Bring another application to the foreground.
 *
 * Call this function to bring another application to the
 * foreground. This could be used when the application is a service provider, to
 * bring the service consumer back to the foreground without sending a response.
 * See under Foreground Execution in the \reflink GDService GDService class reference\endlink for details.
 * 
This function is asynchronous. Success or failure is returned by
 * invocation of a code block specified in the <tt>completion</tt> parameter.
 * The block will receive one parameter of type <tt>BOOL</tt> and should have no
 * return value. It may or may not be executed on the main thread.
 *
 * Don't use this function outside the context of service request
 * processing.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to be brought to the foreground.
 *                    
 * @param completion Code block to execute when the operation completes or
 *                   fails. It receives one parameter:\n
 *                   <tt>YES</tt> if the other application was brought to the
 *                   foreground, based on the return code from the native
 *                   layer.\n
 *                   <tt>NO</tt> otherwise.
 *
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned.
 * @return <tt>YES</tt> if the <tt>completion</tt> code block will be invoked.
 * @return <tt>NO</tt> otherwise.
 */
+ (BOOL) bringToFront:(nonnull NSString *)application completion:( void(^)(BOOL) )completion error:(NSError**)error;

/** Bring another application to the foreground (deprecated).
 *
 * \deprecated This function is deprecated and will be removed in a future
 * release. Use \reflink GDService::bringToFront:completion:error: GDService::bringToFront:completion:error: \endlink
 * instead.
 *
 * Call this function to bring another application to the
 * foreground. This could be used when the application is a service provider, to
 * bring the service consumer back to the foreground without sending a response.
 * See under Foreground Execution in the \reflink GDService GDService class reference\endlink for details.
 * 
Don't use this function outside the context of service request
 * processing.
 *
 * @param application <tt>NSString</tt> containing the native application identifier of
 *                    the application to be brought to the foreground.
 * @param error For returning an <tt>NSError</tt> object if an error occurs. If <tt>nil</tt>, no object will be returned.
 * @return <tt>YES</tt> if the specified application was brought to the foreground,
 *         based on the return code from the native layer.
 * @return <tt>NO</tt> otherwise.
 */
+ (BOOL) bringToFront:(nonnull NSString *)application error:(NSError**)error DEPRECATE_BRINGTOFRONTWITHOUTCOMPLETION;

/** Handler that implements the services provided by the application.
 * 
 * When an AppKinetics service request is received, the BlackBerry
 * Dynamics runtime dispatches an event to an observer within the application.
 * Set this property to the observer object instance in the application.
 * 
 * The observer object must:
 * - Implement the \reflink GDServiceDelegate GDServiceDelegate \endlink 
 *   protocol.
 * - Process received service requests in accordance with the published
 *   interface of the service provided. The interface could be, for example, a
 *   BlackBerry Dynamics service definition.
 * .
 * The processing could include calling \reflink GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService) \endlink to issue a
 * service response.
 * 
 */
@property (nullable, weak, getter = getDelegate, setter = setDelegate:) id<GDServiceDelegate> delegate;

@end

NS_ASSUME_NONNULL_END

#endif
